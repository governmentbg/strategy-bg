@inject ITimeFormattingService TimeFormattingService
@model PostItemContainer
@{
	string deleteLink;
	if (Model.Post.IsDeleted)
	{deleteLink = PopForums.Resources.Undelete;}
	else if (Model.Post.IsFirstInTopic)
	{deleteLink = PopForums.Resources.DeleteTopic;}
	else
	{deleteLink = PopForums.Resources.Delete;}
}

<a name="@Model.Post.PostID"></a>
<div class="@(Model.Post.IsDeleted ? "bg-danger " : "")postItem" data-postid="@Model.Post.PostID" data-userid="@Model.Post.UserID">
	<div class="bg-primary">
		<div class="bg-primary"><span class="twirl glyphicon glyphicon-chevron-right"></span> @Model.Post.Name</div>
		<div class="miniProfileBox bg-info text-info"></div>
		<small class="postTime text-right">
			@if (Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
			{
				@:IP: @Model.Post.IP -
			}
			<span class="fTime" data-utc="@Model.Post.PostTime.ToString("o")">@TimeFormattingService.GetFormattedTime(Model.Post.PostTime, Model.Profile)</span>
		</small>
	</div>
	@if (Model.Profile != null && !Model.Profile.HideVanity && (Model.Avatars).ContainsKey(Model.Post.UserID))
	{
		<img src="@Url.Action("Avatar", "Image", new {id = (Model.Avatars)[Model.Post.UserID]})" alt="@String.Format(PopForums.Resources.NameAvatar, Model.Post.Name)" class="avatar pull-right" />
	}

	@Html.Raw(Model.Post.FullText)
	@if (Model.Post.IsEdited && Model.Post.LastEditTime.HasValue)
	{
		<small>@String.Format(PopForums.Resources.NameLastEdit, Model.Post.LastEditName), <span class="fTime" data-utc="@Model.Post.LastEditTime.Value.ToString("o")">@TimeFormattingService.GetFormattedTime(Model.Post.LastEditTime.Value, Model.Profile)</span></small>
	}

	@if (Model.Post.ShowSig && Model.Profile != null && !Model.Profile.HideVanity && (Model.Signatures).ContainsKey(Model.Post.UserID))
	{
		<hr />
		<div class="signature">@Html.Raw((Model.Signatures)[Model.Post.UserID])</div>
	}
	<div class="postToolContainer">
		<div class="voteCount label label-primary">@await Html.PartialAsync("Votes.cshtml", Model.Post.Votes)</div>
		<ul class="postTools list-inline">
			@if (Model.User != null && Model.User.UserID != Model.Post.UserID)
			{
				if (Model.VotedPostIDs.Contains(Model.Post.PostID))
				{
					<li>@PopForums.Resources.Voted</li>
				}
				else
				{
					<li class="voteUp btn-link">Гласувай</li>}
			}
			@*<li>@Html.ActionLink(PopForums.Resources.Link, "PostLink", "Forum", new { id = Model.Post.PostID }, null)</li>
			@if (User != null && Model.Topic != null && Model.Topic.IsClosed == false)
			{
				<li><input type="button" class="replyLink btn-link" value="@PopForums.Resources.Reply" /></li>
				<li><input type="button" class="quoteLink btn-link" value="@PopForums.Resources.Quote" /></li>
			}               aangelov to level original functionality *@
			@if (Model.User.IsPostEditable(Model.Post))
			{
				<li>@Html.ActionLink(PopForums.Resources.Edit, "Edit", "Forum", new { id = Model.Post.PostID }, null)</li>
				if (Model.Post.IsDeleted)
				{
					<li>
						<form asp-action="UndeletePost" asp-controller="Moderator" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm"><input type="submit" value="@PopForums.Resources.Undelete" class="btn-link" /></form>
					</li>
				}
				else
				{
					<li>
						<form asp-action="DeletePost" asp-controller="Forum" asp-antiforgery="false" asp-route-id="@Model.Post.PostID" class="deletePostForm"><input type="submit" value="@deleteLink" class="btn-link" /></form>
					</li>
				}
			}
			@if (Model.Post.IsEdited && Model.User != null && Model.User.IsInRole(PermanentRoles.Moderator))
			{
				<li><input data-postid="@Model.Post.PostID" class="btn-link postModLogButton" type="button" value="@PopForums.Resources.ModerationLog" /></li>
			}
		</ul>
		<div class="moderationLog"></div>
	</div>
</div>